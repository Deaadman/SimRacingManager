@page "/ChampionshipDetails/{ChampionshipGuid:guid}"

@using SimRacingManager.Core
@using Supabase.Postgrest

@inject NavigationManager Navigation

@rendermode InteractiveServer

<MudText Typo="Typo.h5" Align="Align.Center" Class="pb-4">@_championshipInstance.Name</MudText>

<MudTable ServerData="FetchDriversFromChampionship">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Drivers</MudText>
    </ToolBarContent>
    <ColGroup>
        <col style="width: 8%" />
        <col />
    </ColGroup>
    <HeaderContent>
        <MudTh>Position</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Points</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Position">@context.Position</MudTd>
        <MudTd DataLabel="Name">[@context.Number] @context.Name @context.Surname</MudTd>
        <MudTd DataLabel="Points">@context.Points</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No records found...</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Fetching data...</MudText>
    </LoadingContent>
</MudTable>

<br/>

<MudTable ServerData="FetchTracksFromChampionship" Hover="true" RowClass="cursor-pointer" T="Track" OnRowClick="RowClickEvent">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Tracks</MudText>
    </ToolBarContent>
    <ColGroup>
        <col />
        <col />
        <col style="width: 1%" />
    </ColGroup>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Date</MudTh>
        <MudTh Style="text-align: center">Status</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Date">@context.Date.ToShortDateString()</MudTd>
        <MudTd DataLabel="Status"><MudChip T="string" Label="true" Color="@context.StatusColour">@context.Status</MudChip></MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No records found...</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Fetching data...</MudText>
    </LoadingContent>
</MudTable>

@code {
    [Parameter]
    public Guid ChampionshipGuid { get; set; }
    
    private Championship _championshipInstance; // Doesn't matter if this is null, it should always be assigned an instance.
    
    protected override void OnInitialized()
    {
        foreach (var championship in DatabaseManager.Championships)
        {
            if (championship.Guid == ChampionshipGuid)
            {
                _championshipInstance = championship;
            }
        }
    }

    private void RowClickEvent(TableRowClickEventArgs<Track> tableRowClickEventArgs)
    {
        Navigation.NavigateTo($"TrackDetails/{tableRowClickEventArgs.Item.Guid}");
    }

    private async Task<TableData<Driver>> FetchDriversFromChampionship(TableState state, CancellationToken token)
    {
        var data = await DatabaseManager.SupabaseClient.From<Driver>()
            .Filter(driver => driver.Guid, Constants.Operator.In, _championshipInstance.DriversGuid)
            .Get();

        _championshipInstance.Drivers.Clear();
        
        foreach (var driver in data.Models)
        {
            _championshipInstance.Drivers.Add(driver);
        }

        foreach (var driver in _championshipInstance.Drivers)
        {
            driver.Points = await DatabaseManager.FetchTotalPointsPerChampionship(_championshipInstance, driver.Guid);
        }

        var totalItems = _championshipInstance.Drivers.Count;

        var pagedData = _championshipInstance.Drivers.Skip(state.Page * state.PageSize).Take(state.PageSize).ToList();

        return new TableData<Driver> { TotalItems = totalItems, Items = pagedData };
    }
    
    private async Task<TableData<Track>> FetchTracksFromChampionship(TableState state, CancellationToken token)
    {
        var data = await DatabaseManager.SupabaseClient.From<Track>()
            .Filter(track => track.Guid, Constants.Operator.In, _championshipInstance.TracksGuid)
            .Order(track => track.Date, Constants.Ordering.Ascending)
            .Get();

        foreach (var track in data.Models)
        {
            track.Initialize();
        }

        var totalItems = data.Models.Count;

        var pagedData = data.Models.Skip(state.Page * state.PageSize).Take(state.PageSize).ToList();

        return new TableData<Track> { TotalItems = totalItems, Items = pagedData };
    }
}